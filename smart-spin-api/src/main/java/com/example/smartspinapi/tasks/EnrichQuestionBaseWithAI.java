package com.example.smartspinapi.tasks;

import com.example.smartspinapi.model.dto.openai.ChatCompletionResponse;
import com.example.smartspinapi.model.dto.openai.ChatMessage;
import com.example.smartspinapi.model.dto.openai.ChatRequest;
import com.example.smartspinapi.model.entity.QuizQuestion;
import com.example.smartspinapi.model.entity.QuizQuestionChoice;
import com.example.smartspinapi.service.QuizCategoryService;
import com.example.smartspinapi.service.QuizQuestionChoiceService;
import com.example.smartspinapi.service.QuizQuestionService;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestClient;

import java.util.*;

@Component
@RequiredArgsConstructor
@Order(2)
public class EnrichQuestionBaseWithAI implements CommandLineRunner {
    private final QuizCategoryService quizCategoryService;
    private final QuizQuestionService quizQuestionService;
    private final QuizQuestionChoiceService quizQuestionChoiceService;

    @Override
    public synchronized void run(String... args) {
        System.out.println("Enriching 20 categories with questions generated by AI");

        String openaiBaseurl = System.getenv("OPENAI_BASEURL");
        String openaiAuthorizationHeader = "Bearer " + System.getenv("OPENAI_KEY");

        RestClient openAIApiClient = RestClient.builder()
                .baseUrl(openaiBaseurl)
                .defaultHeader("Authorization", openaiAuthorizationHeader)
                .build();

        var categoryList = quizCategoryService.findAll().stream().toList();
        for (var category : categoryList) {
            long questionCount = quizQuestionService.countQuizQuestionsByCategory(category);
            if (questionCount > 10) {
                System.out.println("Category " + category + " has enough questions, skipping.");
                continue;
            }

            ChatMessage systemMessage = new ChatMessage();
            systemMessage.role = "system";
            systemMessage.content = "You are a helpful assistant.";

            ChatMessage userMessage = new ChatMessage();
            userMessage.role = "user";
            userMessage.content = "Generate 20 trivia questions on the topic of " + category.name + ". " +
                    "They should be in a CSV format - the question, the correct answer, and three wrong answers, in that order. " +
                    "Make sure not to include anything other than the 20 lines with the aforementioned format." +
                    "Please don't include any commas in the questions or answers, to keep the CSV processing simple.";

            ChatRequest request = new ChatRequest();
            request.model = System.getenv("OPENAI_MODEL");
            request.stream = false;
            request.messages = new ArrayList<>();
            request.messages.add(systemMessage);
            request.messages.add(userMessage);

            var response = openAIApiClient.post().uri("/chat/completions")
                    .body(request)
                    .retrieve().body(ChatCompletionResponse.class);

            String payload = Objects.requireNonNull(response).choices.get(0).message.content;

            String[] lines = payload.split("\\r?\\n");

            for (String line : lines) {
                String[] parts = line.split("\",\"");
                if (parts.length != 5) continue;

                parts[0] = parts[0].replaceFirst("^\"", "");
                parts[4] = parts[4].replaceFirst("\"$", "");

                QuizQuestion question = new QuizQuestion();
                question.setContent(parts[0]);
                question.setCategory(category);
                quizQuestionService.save(question);

                QuizQuestionChoice choice = new QuizQuestionChoice();
                choice.setCorrect(true);
                choice.setQuestion(question);
                choice.setContent(parts[1]);
                quizQuestionChoiceService.save(choice);

                QuizQuestionChoice incorrect1 = new QuizQuestionChoice();
                incorrect1.setCorrect(false);
                incorrect1.setQuestion(question);
                incorrect1.setContent(parts[2]);
                quizQuestionChoiceService.save(incorrect1);

                QuizQuestionChoice incorrect2 = new QuizQuestionChoice();
                incorrect2.setCorrect(false);
                incorrect2.setQuestion(question);
                incorrect2.setContent(parts[3]);
                quizQuestionChoiceService.save(incorrect2);

                QuizQuestionChoice incorrect3 = new QuizQuestionChoice();
                incorrect3.setCorrect(false);
                incorrect3.setQuestion(question);
                incorrect3.setContent(parts[4]);
                quizQuestionChoiceService.save(incorrect3);
            }
        }
    }
}
